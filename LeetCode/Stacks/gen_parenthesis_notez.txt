


https://leetcode.com/problems/generate-parentheses/description/


class Solution {
public:
    vector<string> generateParenthesis(int n) 
    {
        vector<string> ans; 
        string curr="";
        backtrack(ans,curr,0,0,n);
        return ans;

    }
    void backtrack(vector<string> &ans,string &curr,int open,int close,int max)
    {
        if(curr.length()==max*2)
        {
            ans.push_back(curr);
            return;
        }
        if(open<max)
        {
            curr.push_back('(');
            backtrack(ans,curr,open+1,close,max);
            curr.pop_back();
        }
        if(close<open)
        {
            curr.push_back(')');
            backtrack(ans,curr,open,close+1,max);
            curr.pop_back();
        }
        
    }
};